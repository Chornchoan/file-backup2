import tkinter as tk
from PIL import Image , ImageTk

# ------------- Constants ---------------------
SCREEN_WIDTH = 3800
SCREEN_HEIGHT = 700

GRAVITY_FORCE = 5
JUMP_FORCE = 25
SPEED = 2

TIMED_LOOP = 10

# ------------- Variables ---------------------

keyPressed = []

# ------------- Window ------------------------

window = tk.Tk()
window.geometry(str(SCREEN_WIDTH) + "x" + str(SCREEN_HEIGHT))
window.title("Movement")
window.attributes("-fullscreen", True)

frame = tk.Frame(window, width=SCREEN_WIDTH, height=SCREEN_HEIGHT)
frame.pack()

canvas = tk.Canvas(frame, width=SCREEN_WIDTH, height=SCREEN_HEIGHT, scrollregion=(0,0,3800,5000))
canvas.pack()

#scrollbar
scrollbar_bottom = tk.Scrollbar(window, orient='horizontal', command=canvas.xview)
canvas.configure(xscrollcommand=scrollbar_bottom.set)
scrollbar_bottom.place(relx=0, rely=1, relwidth=1, anchor='sw')

# _____Define image______
# Image bg
bg_file = Image.open("Image/bgf.jpg")
bg = ImageTk.PhotoImage(bg_file)
canvas.create_image(600,350,image=bg)
canvas.create_image(1950,350,image=bg)
canvas.create_image(3300,350,image=bg)


wall_file =Image.open("Image/platform.png")
wall_size =wall_file.resize((200,50))
wall=ImageTk.PhotoImage(wall_size)

applImg_file =Image.open("Image/apple.png")
applImg_size =applImg_file.resize((50 ,50))
apple=ImageTk.PhotoImage(applImg_size)

canvas.create_image(100, 600, image=wall, tags="PLATFORM")
canvas.create_image(200, 250, image=wall, tags="PLATFORM")
canvas.create_image(650, 150,  image=wall, tags="PLATFORM")
canvas.create_image(400, 400,  image=wall, tags="PLATFORM")
canvas.create_image(800, 400,  image=wall, tags="PLATFORM")
canvas.create_image(620, 600, image=wall, tags="PLATFORM")
canvas.create_image(1050, 300,  image=wall, tags="PLATFORM")
canvas.create_image(1200, 500,  image=wall, tags="PLATFORM")
canvas.create_image(1400, 600,  image=wall, tags="PLATFORM")
# canvas.create_image(400, 400,  image=wall, tags="PLATFORM")

canvas.create_image(350,500,  image=apple, tags="FRUITES")

# ------------- CHAR --------------------------

play_file = Image.open("Image/playerR.png")
play_size = play_file.resize((50, 50))
play = ImageTk.PhotoImage(play_size)

player = canvas.create_image(50, 0, image=play)

charR_file = Image.open("Image/playerR.png")
charR_size = charR_file.resize((50, 50))
charR = ImageTk.PhotoImage(charR_size)

charL_file = Image.open("Image/playerL.png")
charL_size = charL_file.resize((50, 50))
charL = ImageTk.PhotoImage(charL_size)

canvas.create_rectangle(0,700,SCREEN_WIDTH,SCREEN_HEIGHT,fill="black",tags="PLATFORM")

# ------------- Functions ---------------------


def check_movement(dx=0, dy=0, checkGround=False):
    coord = canvas.coords(player)
    platforms = canvas.find_withtag("PLATFORM")

    if coord[0] + dx < 0 or coord[0]+play.width() + dx > SCREEN_WIDTH:
        return False
    if checkGround:
        overlap = canvas.find_overlapping(coord[0], coord[1], coord[0]+play.width() , coord[1]+play.height() + dy)
    else:
        overlap = canvas.find_overlapping(coord[0]+dx, coord[1]+dy, coord[0]+dx, coord[1]+play.width())

    for platform in platforms:
        if platform in overlap:
            return False
    return True

def chack_Fruite():
    coord = canvas.coords(player)
    fruites = canvas.addtag_withtag("FRUITES")
    overLap = canvas.find_overlapping(coord[0], coord[1], coord[0]+play.width(), coord(1)+play.height())

    for FRUITES in fruites:
        if FRUITES in overLap:
            return  FRUITES
    return FRUITES

def is_border_left():
    return canvas.coords(player)[0] < 30

def is_border_right():
    return canvas.coords(player)[0] > 670

def is_border_top():
    return canvas.coords(player)[1] < 30

def is_border_bottom():
    return canvas.coords(player)[1] > 370

def move_shape(event):
    if event.keysym == "Left" and not is_border_left():
        canvas.move(player, -5, 0)
    elif event.keysym == "Right" and not is_border_right():
        canvas.move(player, 5, 0)
    elif event.keysym == "Up" and not is_border_top():
        canvas.move(player, 0, -5)
    elif event.keysym == "Down" and not is_border_bottom():
        canvas.move(player, 0, 5)

#Delete fruit__
    shape = chack_Fruite()
    if shape > 0:
        coord=canvas.coords(shape)
        canvas.delete(shape)

def jump(force):
    if force > 0:
        if check_movement(0, -force):
            canvas.move(player, 0, -force)
            window.after(TIMED_LOOP, jump, force-1)
            
def start_move(event):
    if event.keysym not in keyPressed:
        keyPressed.append(event.keysym)
        if len(keyPressed) == 1:
            move()

def move():
    if not keyPressed == []:
        x = 0
        if "Left" in keyPressed:
            canvas.itemconfigure(player,image=charL)
            x -= SPEED
        if "Right" in keyPressed:
            canvas.itemconfigure(player,image=charR)
            x += SPEED
        if "space" in keyPressed and not check_movement(0, GRAVITY_FORCE, True):
            jump(JUMP_FORCE)
        if check_movement(x):
            canvas.move(player, x, 0)
        window.after(TIMED_LOOP, move)

def gravity():
    if check_movement(0, GRAVITY_FORCE, True):
        canvas.move(player, 0, GRAVITY_FORCE)
    window.after(TIMED_LOOP, gravity)

def stop_move(event):
    global keyPressed
    if event.keysym in keyPressed:
        keyPressed.remove(event.keysym)

gravity()



window.bind("<Key>", start_move)
window.bind("<KeyRelease>", stop_move)

window.mainloop()